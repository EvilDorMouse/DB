CREATE OR REPLACE PACKAGE STUD08.SEM2 AS
PROCEDURE VIEW_DATA(START_D VARCHAR2, END_D VARCHAR2, OPER VARCHAR2);
PROCEDURE ROLL_BACK(N_ID NUMBER);
PROCEDURE REPORT(TABLE_NAME BOOLEAN, OPERATION_TYPE BOOLEAN, COUNT_EXECUTE BOOLEAN); 
END SEM2;
/

CREATE OR REPLACE PACKAGE BODY STUD08.SEM2 AS
----------------------------------------------------(1)

PROCEDURE VIEW_DATA(START_D VARCHAR2, END_D VARCHAR2, OPER VARCHAR2)
AS
TYPE NEW_REC IS REF CURSOR;
RECORDING VARCHAR2(1000);

SELECT_REC NEW_REC;
ST_DATE DATE;
EN_DATE DATE;

CH NUMBER;
BEGIN

ST_DATE := TO_DATE(START_D, 'DD-MM-YYYY');
EN_DATE := TO_DATE(END_D, 'DD-MM-YYYY');

RECORDING :=
'
SELECT *
FROM SEM_LOG
WHERE EVENT_DATE
BETWEEN '''||ST_DATE||''' AND '''||EN_DATE||'''
AND EVENT_TYPE = '''||OPER||'''
';

--OPEN SELECT_REC
--FOR RECORDING;

dbms_output.put_line(RECORDING);
END;

----------------------------------------------------(2)

PROCEDURE ROLL_BACK(N_ID NUMBER)
AS
TYPE NEW_REC IS REF CURSOR;
RECORDING VARCHAR2(1000);

SELECT_REC NEW_REC;
-----------------------------
N_TYPE VARCHAR2(10);

N_TABLE VARCHAR2(40);
N_STRING NUMBER(10);
-----------------------------
N_OLD VARCHAR2(20);
N_COLUMN VARCHAR2(40);
-----------------------------
CH NUMBER;
MY_VAL VARCHAR2(20);
D_TYPE VARCHAR2(30);
BEGIN

SELECT TABLE_NAME, STRING_ID, EVENT_TYPE
INTO N_TABLE, N_STRING, N_TYPE
FROM SEM_LOG
WHERE ID = N_ID
GROUP BY TABLE_NAME, STRING_ID, EVENT_TYPE;

dbms_output.put_line(N_TABLE || ', '|| N_STRING || ', '|| N_TYPE);

IF N_TYPE = 'INSERT' THEN
RECORDING :=
'
DELETE FROM '||N_TABLE||'
WHERE ID = '||N_STRING||'
';

dbms_output.put_line(RECORDING);
END IF;
----------------------------------------
IF N_TYPE = 'UPDATE' THEN
SELECT OLD_VALUE, COLUMN_NAME
INTO N_OLD, N_COLUMN
FROM SEM_LOG
WHERE ID = N_ID;

dbms_output.put_line(N_OLD || ', '|| N_COLUMN);

RECORDING :=
'
UPDATE '||N_TABLE||'
SET '||N_COLUMN||' = '||N_OLD||'
WHERE ID = '||N_STRING;

dbms_output.put_line(RECORDING);
END IF;
----------------------------------------
IF N_TYPE = 'DELETE' THEN
SELECT COUNT(*)
INTO CH
FROM SEM_LOG
WHERE ID = N_ID;

RECORDING :=
'
INSERT INTO '||N_TABLE||'
VALUES(';

FOR I IN 1..CH LOOP
SELECT OLD_VALUE, COLUMN_NAME
INTO MY_VAL, N_COLUMN
FROM SEM_LOG
WHERE ID = N_ID AND OPER_ID = I;

SELECT DATA_TYPE
INTO D_TYPE
FROM ALL_TAB_COLUMNS
WHERE TABLE_NAME = N_TABLE
AND COLUMN_NAME = N_COLUMN;
dbms_output.put_line(D_TYPE);

IF D_TYPE = 'VARCHAR2' THEN
RECORDING := RECORDING ||''''|| MY_VAL ||'''';
ELSE
RECORDING := RECORDING || MY_VAL;
END IF;

IF I <> CH THEN
RECORDING := RECORDING || ', ';
ELSE
RECORDING := RECORDING || ')';
END IF;
END LOOP;

dbms_output.put_line(RECORDING);
END IF;

EXECUTE IMMEDIATE RECORDING;
END;

----------------------------------------------------(3)

PROCEDURE REPORT(TABLE_NAME BOOLEAN, OPERATION_TYPE BOOLEAN, COUNT_EXECUTE BOOLEAN)
AS
TYPE NEW_REC IS REF CURSOR;
RECORDING VARCHAR2(1000);

SELECT_REC NEW_REC;

CH NUMBER;
BEGIN

RECORDING :=
'
SELECT TABLE_NAME, EVENT_TYPE, COUNT(*) COUNT_OPER
FROM SEM_LOG
GROUP BY TABLE_NAME, EVENT_TYPE
';

CH := 0;

IF (TABLE_NAME = TRUE) OR (OPERATION_TYPE = TRUE) OR (COUNT_EXECUTE = TRUE) THEN
RECORDING := RECORDING||'ORDER BY ';
END IF;

IF TABLE_NAME = TRUE THEN
RECORDING := RECORDING||'TABLE_NAME DESC';
CH := 1;
END IF;

IF OPERATION_TYPE = TRUE THEN
IF CH = 1 THEN
RECORDING := RECORDING||', ';
END IF;
RECORDING := RECORDING||'EVENT_TYPE DESC';
CH := 1;
END IF;

IF COUNT_EXECUTE = TRUE THEN
IF CH = 1 THEN
RECORDING := RECORDING||', ';
END IF;
RECORDING := RECORDING||'COUNT_OPER DESC';
END IF;

--OPEN SELECT_REC
--FOR RECORDING;

dbms_output.put_line(RECORDING);
END;

--------------------------------------------------(END)
END SEM2;
/

